7/24
  Broken tests! Eeeeeek! (fixed) Why don't trees have meta-data? (source and all that stuff)?
  

7/20
  Probably won't do much today but if I do, I'll wire up the output writer to the command line. Okay. Minimally wired up.
  NEXT: command line options specifying format should actually work? For no apparent reason i added a pretty print option. NOW I'll do command line! I'm not liking the json format. Thee. That's better!

7/17
  Switching order of next tasks. Write out results first. Apparently I had other work underway - comparing for multiple overlaps and validating a tree. But i can't do the last one until it's possible to read in a tree from somewhere and I'm not yet sure of an efficient way to do the other. So writing results out it is!
  NEXT: Write results from the command line (the writer exists but needs connected to the executable)
  THEN: Command line comparing 2 files
  AND THEN: Back to comparing fragments
  BUT: What about reading in text files and breaking into ngrams? (reasonable defaults needed but also some control)

7/16
  There is an easy way of comparing trees, and a hard way. I've done the easy way but the hard needs to be done too, because two trees may have more than 1 subtree of overlap. Great fun.

  Future features: Create an image file showing a tree, or overlapping trees. Or a heat map of overlaps! That sounds ... useful?
    Possibly more useful, trace overlaps back to their source.
    Also: output results in JSON or serialize to file.
    Have I done any work at all with command line options for this thing? Apparently not. Starting it now.
    NEXT: From the command line, read in 2 (binary) files and compare them.
    THEN: Write out results as mentioned above.
    
7/6
  Now it builds a tree with tests. Time to commit to git!
    Next: Comparing 2 trees.
    How do you do that? I think you start from the top and if they're the same, fine. Otherwise you have to find overlaps at every level. Any level with no ovrlap is where you stop. Store similarities in a subtree.
    The assumption is that if there is any similarity, it will be in a contiguous subtree, not in random locations.
    Done!
    Next up: write a sample program using the gem to do some checks.

7/1
  Okay, it now builds a complete tree.
  Next step is to build a few and store them into a db or something so I can do comparisons.

6/23/2015
  The merk gem provides tools to easily create and compare merkle trees. This is so I can explore possible uses for data validation.
  Got it so it reads in a file.
  Next: build the tree.

